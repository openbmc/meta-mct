From 83d5440cc65565e822d77b9d95c7fd5ad1f48747 Mon Sep 17 00:00:00 2001
From: "Henbin.Chang" <henbin-chang@mic.com.tw>
Date: Wed, 3 Oct 2018 13:08:21 +0800
Subject: [PATCH] [Bug] Fix watchdog timer not stop issue in AMI BIOS

---
 app/watchdog.cpp         | 8 +++++++-
 app/watchdog_service.cpp | 8 ++++++++
 app/watchdog_service.hpp | 9 +++++++++
 3 files changed, 24 insertions(+), 1 deletion(-)
 mode change 100644 => 100755 app/watchdog.cpp
 mode change 100644 => 100755 app/watchdog_service.cpp
 mode change 100644 => 100755 app/watchdog_service.hpp

diff --git a/app/watchdog.cpp b/app/watchdog.cpp
old mode 100644
new mode 100755
index 3d8e227..cdbed4a
--- a/app/watchdog.cpp
+++ b/app/watchdog.cpp
@@ -165,6 +165,12 @@ ipmi_ret_t ipmi_app_watchdog_set(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
             wd_service.setEnabled(false);
         }
 
+        /*werber add start for Fix AMI BIOS not stop watchdog issue.*/
+        uint64_t wd_time_user = 0x0; //Global variable for timer use.
+        wd_time_user = req.timer_use & 0x07; //Store the timer use value.
+        wd_service.setTimerUse(wd_time_user);
+        /*werber add end for Fix AMI BIOS not stop watchdog issue.*/
+
         // Set the action based on the request
         const auto ipmi_action =
             static_cast<IpmiAction>(req.timer_action & wd_timeout_action_mask);
@@ -271,7 +277,7 @@ ipmi_ret_t ipmi_app_watchdog_get(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
 
         // Build and return the response
         wd_get_res res;
-        res.timer_use = wd_dont_log;
+        res.timer_use = wd_dont_log | wd_prop.timerUse; //Werber add for Restore the timer use value.
         res.timer_action =
             static_cast<uint8_t>(wdActionToIpmiAction(wd_prop.expireAction));
         if (wd_prop.enabled)
diff --git a/app/watchdog_service.cpp b/app/watchdog_service.cpp
old mode 100644
new mode 100755
index 769a70d..0812619
--- a/app/watchdog_service.cpp
+++ b/app/watchdog_service.cpp
@@ -82,6 +82,7 @@ WatchdogService::Properties WatchdogService::getProperties()
             get<std::string>(properties.at("ExpireAction")));
         wd_prop.interval = get<uint64_t>(properties.at("Interval"));
         wd_prop.timeRemaining = get<uint64_t>(properties.at("TimeRemaining"));
+        wd_prop.timerUse = get<uint64_t>(properties.at("TimerUse")); //werber add for Fix AMI BIOS not stop watchdog issue.
         return wd_prop;
     }
     catch (const std::exception& e)
@@ -188,3 +189,10 @@ void WatchdogService::setTimeRemaining(uint64_t timeRemaining)
 {
     setProperty("TimeRemaining", timeRemaining);
 }
+
+/*Werber add start for Fix AMI BIOS not stop watchdog issue.*/
+void WatchdogService::setTimerUse(uint64_t timeruse)
+{
+    setProperty("TimerUse", timeruse);
+}
+/*Werber add end for Fix AMI BIOS not stop watchdog issue.*/
\ No newline at end of file
diff --git a/app/watchdog_service.hpp b/app/watchdog_service.hpp
old mode 100644
new mode 100755
index 8056fb7..c1d6dc1
--- a/app/watchdog_service.hpp
+++ b/app/watchdog_service.hpp
@@ -35,6 +35,7 @@ class WatchdogService
         Action expireAction;
         uint64_t interval;
         uint64_t timeRemaining;
+        uint64_t timerUse;//Werber add for Fix AMI BIOS not stop watchdog issue.
     };
 
     /** @brief Retrieves a copy of the currently set properties on the
@@ -83,6 +84,14 @@ class WatchdogService
      */
     void setTimeRemaining(uint64_t timeRemaining);
 
+    /*Werber add for Fix AMI BIOS not stop watchdog issue.*/
+    /** @brief Sets the value of the timer use id on the host
+     *         watchdog
+     *
+     *  @param[in] timeruse - The new timer use id value
+     */
+    void setTimerUse(uint64_t timeruse);
+    /*Werber add for Fix AMI BIOS not stop watchdog issue.*/
   private:
     /** @brief sdbusplus handle */
     sdbusplus::bus::bus bus;
